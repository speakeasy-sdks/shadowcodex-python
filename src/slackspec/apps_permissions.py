"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from slackspec.models import operations
from typing import Any, Optional

class AppsPermissions:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    
    def apps_permissions_info(self, request: operations.AppsPermissionsInfoRequest, security: operations.AppsPermissionsInfoSecurity) -> operations.AppsPermissionsInfoResponse:
        r"""Returns list of permissions this app has on a team.
        https://api.slack.com/methods/apps.permissions.info - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/apps.permissions.info'
        
        query_params = utils.get_query_params(operations.AppsPermissionsInfoRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AppsPermissionsInfoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.apps_permissions_info_schema = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.apps_permissions_info_error_schema = out

        return res

    
    def apps_permissions_request(self, request: operations.AppsPermissionsRequestRequest, security: operations.AppsPermissionsRequestSecurity) -> operations.AppsPermissionsRequestResponse:
        r"""Allows an app to request additional scopes
        https://api.slack.com/methods/apps.permissions.request - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/apps.permissions.request'
        
        query_params = utils.get_query_params(operations.AppsPermissionsRequestRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AppsPermissionsRequestResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.apps_permissions_request_schema = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.apps_permissions_request_error_schema = out

        return res

    