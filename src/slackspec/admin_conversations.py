"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from slackspec.models import operations
from typing import Any, Optional

class AdminConversations:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    
    def admin_conversations_archive(self, request: operations.AdminConversationsArchiveRequest, security: operations.AdminConversationsArchiveSecurity) -> operations.AdminConversationsArchiveResponse:
        r"""Archive a public or private channel.
        https://api.slack.com/methods/admin.conversations.archive - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.conversations.archive'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminConversationsArchiveResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.admin_conversations_archive_schema = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.admin_conversations_archive_error_schema = out

        return res

    
    def admin_conversations_convert_to_private(self, request: operations.AdminConversationsConvertToPrivateRequest, security: operations.AdminConversationsConvertToPrivateSecurity) -> operations.AdminConversationsConvertToPrivateResponse:
        r"""Convert a public channel to a private channel.
        https://api.slack.com/methods/admin.conversations.convertToPrivate - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.conversations.convertToPrivate'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminConversationsConvertToPrivateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.admin_conversations_convert_to_private_schema = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.admin_conversations_convert_to_private_error_schema = out

        return res

    
    def admin_conversations_create(self, request: operations.AdminConversationsCreateRequest, security: operations.AdminConversationsCreateSecurity) -> operations.AdminConversationsCreateResponse:
        r"""Create a public or private channel-based conversation.
        https://api.slack.com/methods/admin.conversations.create - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.conversations.create'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminConversationsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.admin_conversations_create_schema = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.admin_conversations_create_error_schema = out

        return res

    
    def admin_conversations_delete(self, request: operations.AdminConversationsDeleteRequest, security: operations.AdminConversationsDeleteSecurity) -> operations.AdminConversationsDeleteResponse:
        r"""Delete a public or private channel.
        https://api.slack.com/methods/admin.conversations.delete - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.conversations.delete'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminConversationsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.admin_conversations_delete_schema = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.admin_conversations_delete_error_schema = out

        return res

    
    def admin_conversations_disconnect_shared(self, request: operations.AdminConversationsDisconnectSharedRequest, security: operations.AdminConversationsDisconnectSharedSecurity) -> operations.AdminConversationsDisconnectSharedResponse:
        r"""Disconnect a connected channel from one or more workspaces.
        https://api.slack.com/methods/admin.conversations.disconnectShared - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.conversations.disconnectShared'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminConversationsDisconnectSharedResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.admin_conversations_rename_schema = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.admin_conversations_disconnect_shared_error_schema = out

        return res

    
    def admin_conversations_get_conversation_prefs(self, request: operations.AdminConversationsGetConversationPrefsRequest, security: operations.AdminConversationsGetConversationPrefsSecurity) -> operations.AdminConversationsGetConversationPrefsResponse:
        r"""Get conversation preferences for a public or private channel.
        https://api.slack.com/methods/admin.conversations.getConversationPrefs - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.conversations.getConversationPrefs'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.AdminConversationsGetConversationPrefsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminConversationsGetConversationPrefsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.admin_conversations_get_conversation_prefs_schema = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.admin_conversations_unarchive_error_schema = out

        return res

    
    def admin_conversations_get_teams(self, request: operations.AdminConversationsGetTeamsRequest, security: operations.AdminConversationsGetTeamsSecurity) -> operations.AdminConversationsGetTeamsResponse:
        r"""Get all the workspaces a given public or private channel is connected to within this Enterprise org.
        https://api.slack.com/methods/admin.conversations.getTeams - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.conversations.getTeams'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.AdminConversationsGetTeamsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminConversationsGetTeamsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.admin_conversations_get_teams_schema = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.admin_conversations_get_teams_error_schema = out

        return res

    
    def admin_conversations_invite(self, request: operations.AdminConversationsInviteRequest, security: operations.AdminConversationsInviteSecurity) -> operations.AdminConversationsInviteResponse:
        r"""Invite a user to a public or private channel.
        https://api.slack.com/methods/admin.conversations.invite - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.conversations.invite'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminConversationsInviteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.admin_conversations_invite_schema = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.admin_conversations_invite_error_schema = out

        return res

    
    def admin_conversations_rename(self, request: operations.AdminConversationsRenameRequest, security: operations.AdminConversationsRenameSecurity) -> operations.AdminConversationsRenameResponse:
        r"""Rename a public or private channel.
        https://api.slack.com/methods/admin.conversations.rename - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.conversations.rename'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminConversationsRenameResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.admin_conversations_rename_schema = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.admin_conversations_unarchive_error_schema = out

        return res

    
    def admin_conversations_search(self, request: operations.AdminConversationsSearchRequest, security: operations.AdminConversationsSearchSecurity) -> operations.AdminConversationsSearchResponse:
        r"""Search for public or private channels in an Enterprise organization.
        https://api.slack.com/methods/admin.conversations.search - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.conversations.search'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.AdminConversationsSearchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminConversationsSearchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.admin_conversations_search_schema = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.admin_conversations_search_error_schema = out

        return res

    
    def admin_conversations_set_conversation_prefs(self, request: operations.AdminConversationsSetConversationPrefsRequest, security: operations.AdminConversationsSetConversationPrefsSecurity) -> operations.AdminConversationsSetConversationPrefsResponse:
        r"""Set the posting permissions for a public or private channel.
        https://api.slack.com/methods/admin.conversations.setConversationPrefs - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.conversations.setConversationPrefs'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminConversationsSetConversationPrefsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.admin_conversations_set_conversation_prefs_schema = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.admin_conversations_set_conversation_prefs_error_schema = out

        return res

    
    def admin_conversations_set_teams(self, request: operations.AdminConversationsSetTeamsRequest, security: operations.AdminConversationsSetTeamsSecurity) -> operations.AdminConversationsSetTeamsResponse:
        r"""Set the workspaces in an Enterprise grid org that connect to a public or private channel.
        https://api.slack.com/methods/admin.conversations.setTeams - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.conversations.setTeams'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminConversationsSetTeamsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_success_template = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_error_template = out

        return res

    
    def admin_conversations_unarchive(self, request: operations.AdminConversationsUnarchiveRequest, security: operations.AdminConversationsUnarchiveSecurity) -> operations.AdminConversationsUnarchiveResponse:
        r"""Unarchive a public or private channel.
        https://api.slack.com/methods/admin.conversations.unarchive - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.conversations.unarchive'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminConversationsUnarchiveResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.admin_conversations_unarchive_schema = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.admin_conversations_unarchive_error_schema = out

        return res

    