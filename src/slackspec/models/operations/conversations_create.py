"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from slackspec import utils
from typing import Any, Optional


@dataclasses.dataclass
class ConversationsCreateSecurity:
    
    slack_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ConversationsCreateApplicationJSON:
    
    is_private: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_private'), 'exclude': lambda f: f is None }})
    r"""Create a private channel instead of a public one"""
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of the public or private channel to create"""
    

@dataclasses.dataclass
class ConversationsCreateRequest:
    
    request_body: Optional[ConversationsCreateApplicationJSON] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})
    token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'token', 'style': 'simple', 'explode': False }})
    r"""Authentication token. Requires scope: `conversations:write`"""
    

@dataclasses.dataclass
class ConversationsCreateResponse:
    
    content_type: str = dataclasses.field()
    status_code: int = dataclasses.field()
    conversations_create_error_schema: Optional[dict[str, dict[str, Any]]] = dataclasses.field(default=None)
    r"""Typical error response when name already in use"""
    conversations_create_success_schema: Optional[dict[str, dict[str, Any]]] = dataclasses.field(default=None)
    r"""If successful, the command returns a rather stark [conversation object](/types/conversation)"""
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)
    