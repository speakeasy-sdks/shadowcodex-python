"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from typing import Any, Optional


@dataclasses.dataclass
class MigrationExchangeSecurity:
    
    slack_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})
    

@dataclasses.dataclass
class MigrationExchangeRequest:
    
    token: str = dataclasses.field(metadata={'query_param': { 'field_name': 'token', 'style': 'form', 'explode': True }})
    r"""Authentication token. Requires scope: `tokens.basic`"""
    users: str = dataclasses.field(metadata={'query_param': { 'field_name': 'users', 'style': 'form', 'explode': True }})
    r"""A comma-separated list of user ids, up to 400 per request"""
    team_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'team_id', 'style': 'form', 'explode': True }})
    r"""Specify team_id starts with `T` in case of Org Token"""
    to_old: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'to_old', 'style': 'form', 'explode': True }})
    r"""Specify `true` to convert `W` global user IDs to workspace-specific `U` IDs. Defaults to `false`."""
    

@dataclasses.dataclass
class MigrationExchangeResponse:
    
    content_type: str = dataclasses.field()
    status_code: int = dataclasses.field()
    migration_exchange_error_schema: Optional[dict[str, dict[str, Any]]] = dataclasses.field(default=None)
    r"""Typical error response when there are no mappings to provide"""
    migration_exchange_success_schema: Optional[dict[str, dict[str, Any]]] = dataclasses.field(default=None)
    r"""Typical success response when mappings exist for the specified user IDs"""
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)
    