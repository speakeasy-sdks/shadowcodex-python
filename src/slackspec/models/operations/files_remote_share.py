"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from typing import Any, Optional


@dataclasses.dataclass
class FilesRemoteShareSecurity:
    
    slack_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})
    

@dataclasses.dataclass
class FilesRemoteShareRequest:
    
    channels: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'channels', 'style': 'form', 'explode': True }})
    r"""Comma-separated list of channel IDs where the file will be shared."""
    external_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'external_id', 'style': 'form', 'explode': True }})
    r"""The globally unique identifier (GUID) for the file, as set by the app registering the file with Slack.  Either this field or `file` or both are required."""
    file: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'file', 'style': 'form', 'explode': True }})
    r"""Specify a file registered with Slack by providing its ID. Either this field or `external_id` or both are required."""
    token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'token', 'style': 'form', 'explode': True }})
    r"""Authentication token. Requires scope: `remote_files:share`"""
    

@dataclasses.dataclass
class FilesRemoteShareResponse:
    
    content_type: str = dataclasses.field()
    status_code: int = dataclasses.field()
    default_error_template: Optional[dict[str, dict[str, Any]]] = dataclasses.field(default=None)
    r"""Typical error response"""
    default_success_template: Optional[dict[str, dict[str, Any]]] = dataclasses.field(default=None)
    r"""Typical success response"""
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)
    