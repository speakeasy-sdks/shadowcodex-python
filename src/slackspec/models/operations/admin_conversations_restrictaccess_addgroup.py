"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from typing import Any, Optional


@dataclasses.dataclass
class AdminConversationsRestrictAccessAddGroupSecurity:
    
    slack_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})
    

@dataclasses.dataclass
class AdminConversationsRestrictAccessAddGroupRequestBody:
    
    channel_id: str = dataclasses.field(metadata={'form': { 'field_name': 'channel_id' }})
    r"""The channel to link this group to."""
    group_id: str = dataclasses.field(metadata={'form': { 'field_name': 'group_id' }})
    r"""The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to be an allowlist for the private channel."""
    token: str = dataclasses.field(metadata={'form': { 'field_name': 'token' }})
    r"""Authentication token. Requires scope: `admin.conversations:write`"""
    team_id: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'team_id' }})
    r"""The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization."""
    

@dataclasses.dataclass
class AdminConversationsRestrictAccessAddGroupResponse:
    
    content_type: str = dataclasses.field()
    status_code: int = dataclasses.field()
    default_error_template: Optional[dict[str, dict[str, Any]]] = dataclasses.field(default=None)
    r"""Typical error response"""
    default_success_template: Optional[dict[str, dict[str, Any]]] = dataclasses.field(default=None)
    r"""Typical success response"""
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)
    