"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from typing import Any, Optional


@dataclasses.dataclass
class OauthAccessSecurity:
    
    slack_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})
    

@dataclasses.dataclass
class OauthAccessRequest:
    
    client_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'client_id', 'style': 'form', 'explode': True }})
    r"""Issued when you created your application."""
    client_secret: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'client_secret', 'style': 'form', 'explode': True }})
    r"""Issued when you created your application."""
    code: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'code', 'style': 'form', 'explode': True }})
    r"""The `code` param returned via the OAuth callback."""
    redirect_uri: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'redirect_uri', 'style': 'form', 'explode': True }})
    r"""This must match the originally submitted URI (if one was sent)."""
    single_channel: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'single_channel', 'style': 'form', 'explode': True }})
    r"""Request the user to add your app only to a single channel. Only valid with a [legacy workspace app](https://api.slack.com/legacy-workspace-apps)."""
    

@dataclasses.dataclass
class OauthAccessResponse:
    
    content_type: str = dataclasses.field()
    status_code: int = dataclasses.field()
    default_error_template: Optional[dict[str, dict[str, Any]]] = dataclasses.field(default=None)
    r"""Typical error response"""
    default_success_template: Optional[dict[str, dict[str, Any]]] = dataclasses.field(default=None)
    r"""Successful user token negotiation for a single scope"""
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)
    