"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from typing import Any, Optional


@dataclasses.dataclass
class ConversationsInfoSecurity:
    
    slack_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})
    

@dataclasses.dataclass
class ConversationsInfoRequest:
    
    channel: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'channel', 'style': 'form', 'explode': True }})
    r"""Conversation ID to learn more about"""
    include_locale: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'include_locale', 'style': 'form', 'explode': True }})
    r"""Set this to `true` to receive the locale for this conversation. Defaults to `false`"""
    include_num_members: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'include_num_members', 'style': 'form', 'explode': True }})
    r"""Set to `true` to include the member count for the specified conversation. Defaults to `false`"""
    token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'token', 'style': 'form', 'explode': True }})
    r"""Authentication token. Requires scope: `conversations:read`"""
    

@dataclasses.dataclass
class ConversationsInfoResponse:
    
    content_type: str = dataclasses.field()
    status_code: int = dataclasses.field()
    conversations_info_error_schema: Optional[dict[str, dict[str, Any]]] = dataclasses.field(default=None)
    r"""Typical error response when a channel cannot be found"""
    conversations_info_success_schema: Optional[dict[str, dict[str, Any]]] = dataclasses.field(default=None)
    r"""Typical success response for a public channel. (Also, a response from a private channel and a multi-party IM is very similar to this example.)"""
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)
    