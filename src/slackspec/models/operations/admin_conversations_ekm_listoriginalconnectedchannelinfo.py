"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from typing import Any, Optional


@dataclasses.dataclass
class AdminConversationsEkmListOriginalConnectedChannelInfoSecurity:
    
    slack_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})
    

@dataclasses.dataclass
class AdminConversationsEkmListOriginalConnectedChannelInfoRequest:
    
    token: str = dataclasses.field(metadata={'query_param': { 'field_name': 'token', 'style': 'form', 'explode': True }})
    r"""Authentication token. Requires scope: `admin.conversations:read`"""
    channel_ids: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'channel_ids', 'style': 'form', 'explode': True }})
    r"""A comma-separated list of channels to filter to."""
    cursor: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'cursor', 'style': 'form', 'explode': True }})
    r"""Set `cursor` to `next_cursor` returned by the previous call to list items in the next page."""
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""The maximum number of items to return. Must be between 1 - 1000 both inclusive."""
    team_ids: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'team_ids', 'style': 'form', 'explode': True }})
    r"""A comma-separated list of the workspaces to which the channels you would like returned belong."""
    

@dataclasses.dataclass
class AdminConversationsEkmListOriginalConnectedChannelInfoResponse:
    
    content_type: str = dataclasses.field()
    status_code: int = dataclasses.field()
    default_error_template: Optional[dict[str, dict[str, Any]]] = dataclasses.field(default=None)
    r"""Typical error response"""
    default_success_template: Optional[dict[str, dict[str, Any]]] = dataclasses.field(default=None)
    r"""Typical success response"""
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)
    