"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from typing import Any, Optional


@dataclasses.dataclass
class AppsPermissionsRequestSecurity:
    
    slack_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})
    

@dataclasses.dataclass
class AppsPermissionsRequestRequest:
    
    scopes: str = dataclasses.field(metadata={'query_param': { 'field_name': 'scopes', 'style': 'form', 'explode': True }})
    r"""A comma separated list of scopes to request for"""
    token: str = dataclasses.field(metadata={'query_param': { 'field_name': 'token', 'style': 'form', 'explode': True }})
    r"""Authentication token. Requires scope: `none`"""
    trigger_id: str = dataclasses.field(metadata={'query_param': { 'field_name': 'trigger_id', 'style': 'form', 'explode': True }})
    r"""Token used to trigger the permissions API"""
    

@dataclasses.dataclass
class AppsPermissionsRequestResponse:
    
    content_type: str = dataclasses.field()
    status_code: int = dataclasses.field()
    apps_permissions_request_error_schema: Optional[dict[str, dict[str, Any]]] = dataclasses.field(default=None)
    r"""Standard failure response when trigger_id is invalid"""
    apps_permissions_request_schema: Optional[dict[str, dict[str, Any]]] = dataclasses.field(default=None)
    r"""Standard success response when used with a user token"""
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)
    