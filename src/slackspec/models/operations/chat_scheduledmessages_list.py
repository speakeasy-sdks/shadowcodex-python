"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from typing import Any, Optional


@dataclasses.dataclass
class ChatScheduledMessagesListSecurity:
    
    slack_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})
    

@dataclasses.dataclass
class ChatScheduledMessagesListRequest:
    
    channel: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'channel', 'style': 'form', 'explode': True }})
    r"""The channel of the scheduled messages"""
    cursor: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'cursor', 'style': 'form', 'explode': True }})
    r"""For pagination purposes, this is the `cursor` value returned from a previous call to `chat.scheduledmessages.list` indicating where you want to start this call from."""
    latest: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'latest', 'style': 'form', 'explode': True }})
    r"""A UNIX timestamp of the latest value in the time range"""
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""Maximum number of original entries to return."""
    oldest: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'oldest', 'style': 'form', 'explode': True }})
    r"""A UNIX timestamp of the oldest value in the time range"""
    token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'token', 'style': 'simple', 'explode': False }})
    r"""Authentication token. Requires scope: `none`"""
    

@dataclasses.dataclass
class ChatScheduledMessagesListResponse:
    
    content_type: str = dataclasses.field()
    status_code: int = dataclasses.field()
    chat_scheduled_messages_list_error_schema: Optional[dict[str, dict[str, Any]]] = dataclasses.field(default=None)
    r"""Typical error response if the channel passed is invalid"""
    chat_scheduled_messages_list_schema: Optional[dict[str, dict[str, Any]]] = dataclasses.field(default=None)
    r"""Typical success response"""
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)
    