"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from typing import Any, Optional


@dataclasses.dataclass
class ReactionsGetSecurity:
    
    slack_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})
    

@dataclasses.dataclass
class ReactionsGetRequest:
    
    token: str = dataclasses.field(metadata={'query_param': { 'field_name': 'token', 'style': 'form', 'explode': True }})
    r"""Authentication token. Requires scope: `reactions:read`"""
    channel: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'channel', 'style': 'form', 'explode': True }})
    r"""Channel where the message to get reactions for was posted."""
    file: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'file', 'style': 'form', 'explode': True }})
    r"""File to get reactions for."""
    file_comment: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'file_comment', 'style': 'form', 'explode': True }})
    r"""File comment to get reactions for."""
    full: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'full', 'style': 'form', 'explode': True }})
    r"""If true always return the complete reaction list."""
    timestamp: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'timestamp', 'style': 'form', 'explode': True }})
    r"""Timestamp of the message to get reactions for."""
    

@dataclasses.dataclass
class ReactionsGetResponse:
    
    content_type: str = dataclasses.field()
    status_code: int = dataclasses.field()
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)
    reactions_get_error_schema: Optional[dict[str, dict[str, Any]]] = dataclasses.field(default=None)
    r"""Typical error response"""
    reactions_get_success_schema: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Typical success response"""
    