"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from typing import Any, Optional


@dataclasses.dataclass
class RtmConnectSecurity:
    
    slack_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})
    

@dataclasses.dataclass
class RtmConnectRequest:
    
    token: str = dataclasses.field(metadata={'query_param': { 'field_name': 'token', 'style': 'form', 'explode': True }})
    r"""Authentication token. Requires scope: `rtm:stream`"""
    batch_presence_aware: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'batch_presence_aware', 'style': 'form', 'explode': True }})
    r"""Batch presence deliveries via subscription. Enabling changes the shape of `presence_change` events. See [batch presence](/docs/presence-and-status#batching)."""
    presence_sub: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'presence_sub', 'style': 'form', 'explode': True }})
    r"""Only deliver presence events when requested by subscription. See [presence subscriptions](/docs/presence-and-status#subscriptions)."""
    

@dataclasses.dataclass
class RtmConnectResponse:
    
    content_type: str = dataclasses.field()
    status_code: int = dataclasses.field()
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)
    rtm_connect_error_schema: Optional[dict[str, dict[str, Any]]] = dataclasses.field(default=None)
    r"""Typical error response"""
    rtm_connect_schema: Optional[dict[str, dict[str, Any]]] = dataclasses.field(default=None)
    r"""Typical success response"""
    