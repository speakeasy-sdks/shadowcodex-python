"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from typing import Any, Optional


@dataclasses.dataclass
class AdminConversationsGetTeamsSecurity:
    
    slack_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})
    

@dataclasses.dataclass
class AdminConversationsGetTeamsRequest:
    
    channel_id: str = dataclasses.field(metadata={'query_param': { 'field_name': 'channel_id', 'style': 'form', 'explode': True }})
    r"""The channel to determine connected workspaces within the organization for."""
    token: str = dataclasses.field(metadata={'header': { 'field_name': 'token', 'style': 'simple', 'explode': False }})
    r"""Authentication token. Requires scope: `admin.conversations:read`"""
    cursor: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'cursor', 'style': 'form', 'explode': True }})
    r"""Set `cursor` to `next_cursor` returned by the previous call to list items in the next page"""
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""The maximum number of items to return. Must be between 1 - 1000 both inclusive."""
    

@dataclasses.dataclass
class AdminConversationsGetTeamsResponse:
    
    content_type: str = dataclasses.field()
    status_code: int = dataclasses.field()
    admin_conversations_get_teams_error_schema: Optional[dict[str, dict[str, Any]]] = dataclasses.field(default=None)
    r"""Typical error response"""
    admin_conversations_get_teams_schema: Optional[dict[str, dict[str, Any]]] = dataclasses.field(default=None)
    r"""Typical success response"""
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)
    