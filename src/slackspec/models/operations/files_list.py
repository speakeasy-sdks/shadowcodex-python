"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from typing import Any, Optional


@dataclasses.dataclass
class FilesListSecurity:
    
    slack_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})
    

@dataclasses.dataclass
class FilesListRequest:
    
    channel: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'channel', 'style': 'form', 'explode': True }})
    r"""Filter files appearing in a specific channel, indicated by its ID."""
    count: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'count', 'style': 'form', 'explode': True }})
    page: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    show_files_hidden_by_limit: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'show_files_hidden_by_limit', 'style': 'form', 'explode': True }})
    r"""Show truncated file info for files hidden due to being too old, and the team who owns the file being over the file limit."""
    token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'token', 'style': 'form', 'explode': True }})
    r"""Authentication token. Requires scope: `files:read`"""
    ts_from: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ts_from', 'style': 'form', 'explode': True }})
    r"""Filter files created after this timestamp (inclusive)."""
    ts_to: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ts_to', 'style': 'form', 'explode': True }})
    r"""Filter files created before this timestamp (inclusive)."""
    types: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'types', 'style': 'form', 'explode': True }})
    r"""Filter files by type ([see below](#file_types)). You can pass multiple values in the types argument, like `types=spaces,snippets`.The default value is `all`, which does not filter the list."""
    user: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'user', 'style': 'form', 'explode': True }})
    r"""Filter files created by a single user."""
    

@dataclasses.dataclass
class FilesListResponse:
    
    content_type: str = dataclasses.field()
    status_code: int = dataclasses.field()
    files_list_error_schema: Optional[dict[str, dict[str, Any]]] = dataclasses.field(default=None)
    r"""Typical error response"""
    files_list_schema: Optional[dict[str, dict[str, Any]]] = dataclasses.field(default=None)
    r"""Typical success response"""
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)
    