"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from typing import Any, Optional


@dataclasses.dataclass
class AdminConversationsSearchSecurity:
    
    slack_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})
    

@dataclasses.dataclass
class AdminConversationsSearchRequest:
    
    token: str = dataclasses.field(metadata={'header': { 'field_name': 'token', 'style': 'simple', 'explode': False }})
    r"""Authentication token. Requires scope: `admin.conversations:read`"""
    cursor: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'cursor', 'style': 'form', 'explode': True }})
    r"""Set `cursor` to `next_cursor` returned by the previous call to list items in the next page."""
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""Maximum number of items to be returned. Must be between 1 - 20 both inclusive. Default is 10."""
    query: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'query', 'style': 'form', 'explode': True }})
    r"""Name of the the channel to query by."""
    search_channel_types: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'search_channel_types', 'style': 'form', 'explode': True }})
    r"""The type of channel to include or exclude in the search. For example `private` will search private channels, while `private_exclude` will exclude them. For a full list of types, check the [Types section](#types)."""
    sort: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""Possible values are `relevant` (search ranking based on what we think is closest), `name` (alphabetical), `member_count` (number of users in the channel), and `created` (date channel was created). You can optionally pair this with the `sort_dir` arg to change how it is sorted"""
    sort_dir: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort_dir', 'style': 'form', 'explode': True }})
    r"""Sort direction. Possible values are `asc` for ascending order like (1, 2, 3) or (a, b, c), and `desc` for descending order like (3, 2, 1) or (c, b, a)"""
    team_ids: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'team_ids', 'style': 'form', 'explode': True }})
    r"""Comma separated string of team IDs, signifying the workspaces to search through."""
    

@dataclasses.dataclass
class AdminConversationsSearchResponse:
    
    content_type: str = dataclasses.field()
    status_code: int = dataclasses.field()
    admin_conversations_search_error_schema: Optional[dict[str, dict[str, Any]]] = dataclasses.field(default=None)
    r"""Typical error response"""
    admin_conversations_search_schema: Optional[dict[str, dict[str, Any]]] = dataclasses.field(default=None)
    r"""Typical success response"""
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)
    