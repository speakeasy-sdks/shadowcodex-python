"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from typing import Any, Optional


@dataclasses.dataclass
class UsersGetPresenceSecurity:
    
    slack_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})
    

@dataclasses.dataclass
class UsersGetPresenceRequest:
    
    token: str = dataclasses.field(metadata={'query_param': { 'field_name': 'token', 'style': 'form', 'explode': True }})
    r"""Authentication token. Requires scope: `users:read`"""
    user: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'user', 'style': 'form', 'explode': True }})
    r"""User to get presence info on. Defaults to the authed user."""
    

@dataclasses.dataclass
class UsersGetPresenceResponse:
    
    content_type: str = dataclasses.field()
    status_code: int = dataclasses.field()
    api_method_users_get_presence: Optional[dict[str, dict[str, Any]]] = dataclasses.field(default=None)
    r"""When requesting information for a different user, this method just returns the current presence (either `active` or `away`)."""
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)
    users_counts_error_schema: Optional[dict[str, dict[str, Any]]] = dataclasses.field(default=None)
    r"""Typical error response"""
    