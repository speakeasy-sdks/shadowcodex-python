"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from slackspec import utils
from typing import Any, Optional


@dataclasses.dataclass
class ChatScheduleMessageSecurity:
    
    slack_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ChatScheduleMessageApplicationJSON:
    
    as_user: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('as_user'), 'exclude': lambda f: f is None }})
    r"""Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [chat.postMessage](chat.postMessage#authorship)."""
    attachments: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attachments'), 'exclude': lambda f: f is None }})
    r"""A JSON-based array of structured attachments, presented as a URL-encoded string."""
    blocks: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('blocks'), 'exclude': lambda f: f is None }})
    r"""A JSON-based array of structured blocks, presented as a URL-encoded string."""
    channel: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channel'), 'exclude': lambda f: f is None }})
    r"""Channel, private group, or DM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details."""
    link_names: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('link_names'), 'exclude': lambda f: f is None }})
    r"""Find and link channel names and usernames."""
    parse: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parse'), 'exclude': lambda f: f is None }})
    r"""Change how messages are treated. Defaults to `none`. See [chat.postMessage](chat.postMessage#formatting)."""
    post_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('post_at'), 'exclude': lambda f: f is None }})
    r"""Unix EPOCH timestamp of time in future to send the message."""
    reply_broadcast: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reply_broadcast'), 'exclude': lambda f: f is None }})
    r"""Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to `false`."""
    text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('text'), 'exclude': lambda f: f is None }})
    r"""How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail."""
    thread_ts: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thread_ts'), 'exclude': lambda f: f is None }})
    r"""Provide another message's `ts` value to make this message a reply. Avoid using a reply's `ts` value; use its parent instead."""
    unfurl_links: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unfurl_links'), 'exclude': lambda f: f is None }})
    r"""Pass true to enable unfurling of primarily text-based content."""
    unfurl_media: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unfurl_media'), 'exclude': lambda f: f is None }})
    r"""Pass false to disable unfurling of media content."""
    

@dataclasses.dataclass
class ChatScheduleMessageRequest:
    
    request_body: Optional[ChatScheduleMessageApplicationJSON] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})
    token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'token', 'style': 'simple', 'explode': False }})
    r"""Authentication token. Requires scope: `chat:write`"""
    

@dataclasses.dataclass
class ChatScheduleMessageResponse:
    
    content_type: str = dataclasses.field()
    status_code: int = dataclasses.field()
    chat_schedule_message_error_schema: Optional[dict[str, dict[str, Any]]] = dataclasses.field(default=None)
    r"""Typical error response if the `post_at` is invalid (ex. in the past or too far into the future)"""
    chat_schedule_message_success_schema: Optional[dict[str, dict[str, Any]]] = dataclasses.field(default=None)
    r"""Typical success response"""
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)
    