"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from typing import Any, Optional


@dataclasses.dataclass
class FilesUploadSecurity:
    
    slack_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})
    

@dataclasses.dataclass
class FilesUploadRequestBody:
    
    channels: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'channels' }})
    r"""Comma-separated list of channel names or IDs where the file will be shared."""
    content: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'content' }})
    r"""File contents via a POST variable. If omitting this parameter, you must provide a `file`."""
    file: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'file' }})
    r"""File contents via `multipart/form-data`. If omitting this parameter, you must submit `content`."""
    filename: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'filename' }})
    r"""Filename of file."""
    filetype: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'filetype' }})
    r"""A [file type](/types/file#file_types) identifier."""
    initial_comment: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'initial_comment' }})
    r"""The message text introducing the file in specified `channels`."""
    thread_ts: Optional[float] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'thread_ts' }})
    r"""Provide another message's `ts` value to upload this file as a reply. Never use a reply's `ts` value; use its parent instead."""
    title: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'title' }})
    r"""Title of file."""
    token: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'token' }})
    r"""Authentication token. Requires scope: `files:write:user`"""
    

@dataclasses.dataclass
class FilesUploadResponse:
    
    content_type: str = dataclasses.field()
    status_code: int = dataclasses.field()
    files_upload_error_schema: Optional[dict[str, dict[str, Any]]] = dataclasses.field(default=None)
    r"""Typical error response"""
    files_upload_schema: Optional[dict[str, dict[str, Any]]] = dataclasses.field(default=None)
    r"""Success response after uploading a file to a channel with an initial message"""
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)
    