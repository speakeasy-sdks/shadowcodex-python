"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from slackspec.models import operations
from typing import Any, Optional

class Files:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    
    def files_comments_delete(self, request: operations.FilesCommentsDeleteRequest, security: operations.FilesCommentsDeleteSecurity) -> operations.FilesCommentsDeleteResponse:
        r"""Deletes an existing comment on a file.
        https://api.slack.com/methods/files.comments.delete - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/files.comments.delete'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FilesCommentsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.files_comments_delete_schema = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.files_comments_delete_error_schema = out

        return res

    
    def files_delete(self, request: operations.FilesDeleteRequest, security: operations.FilesDeleteSecurity) -> operations.FilesDeleteResponse:
        r"""Deletes a file.
        https://api.slack.com/methods/files.delete - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/files.delete'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FilesDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.files_delete_schema = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.files_delete_error_schema = out

        return res

    
    def files_info(self, request: operations.FilesInfoRequest, security: operations.FilesInfoSecurity) -> operations.FilesInfoResponse:
        r"""Gets information about a file.
        https://api.slack.com/methods/files.info - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/files.info'
        
        query_params = utils.get_query_params(operations.FilesInfoRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FilesInfoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.files_info_schema = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.files_info_error_schema = out

        return res

    
    def files_list(self, request: operations.FilesListRequest, security: operations.FilesListSecurity) -> operations.FilesListResponse:
        r"""List for a team, in a channel, or from a user with applied filters.
        https://api.slack.com/methods/files.list - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/files.list'
        
        query_params = utils.get_query_params(operations.FilesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FilesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.files_list_schema = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.files_list_error_schema = out

        return res

    
    def files_remote_add(self, request: operations.FilesRemoteAddRequestBody, security: operations.FilesRemoteAddSecurity) -> operations.FilesRemoteAddResponse:
        r"""Adds a file from a remote service
        https://api.slack.com/methods/files.remote.add - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/files.remote.add'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FilesRemoteAddResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_success_template = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_error_template = out

        return res

    
    def files_remote_info(self, request: operations.FilesRemoteInfoRequest, security: operations.FilesRemoteInfoSecurity) -> operations.FilesRemoteInfoResponse:
        r"""Retrieve information about a remote file added to Slack
        https://api.slack.com/methods/files.remote.info - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/files.remote.info'
        
        query_params = utils.get_query_params(operations.FilesRemoteInfoRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FilesRemoteInfoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_success_template = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_error_template = out

        return res

    
    def files_remote_list(self, request: operations.FilesRemoteListRequest, security: operations.FilesRemoteListSecurity) -> operations.FilesRemoteListResponse:
        r"""Retrieve information about a remote file added to Slack
        https://api.slack.com/methods/files.remote.list - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/files.remote.list'
        
        query_params = utils.get_query_params(operations.FilesRemoteListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FilesRemoteListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_success_template = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_error_template = out

        return res

    
    def files_remote_remove(self, request: operations.FilesRemoteRemoveRequestBody, security: operations.FilesRemoteRemoveSecurity) -> operations.FilesRemoteRemoveResponse:
        r"""Remove a remote file.
        https://api.slack.com/methods/files.remote.remove - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/files.remote.remove'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FilesRemoteRemoveResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_success_template = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_error_template = out

        return res

    
    def files_remote_share(self, request: operations.FilesRemoteShareRequest, security: operations.FilesRemoteShareSecurity) -> operations.FilesRemoteShareResponse:
        r"""Share a remote file into a channel.
        https://api.slack.com/methods/files.remote.share - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/files.remote.share'
        
        query_params = utils.get_query_params(operations.FilesRemoteShareRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FilesRemoteShareResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_success_template = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_error_template = out

        return res

    
    def files_remote_update(self, request: operations.FilesRemoteUpdateRequestBody, security: operations.FilesRemoteUpdateSecurity) -> operations.FilesRemoteUpdateResponse:
        r"""Updates an existing remote file.
        https://api.slack.com/methods/files.remote.update - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/files.remote.update'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FilesRemoteUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_success_template = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_error_template = out

        return res

    
    def files_revoke_public_url(self, request: operations.FilesRevokePublicURLRequest, security: operations.FilesRevokePublicURLSecurity) -> operations.FilesRevokePublicURLResponse:
        r"""Revokes public/external sharing access for a file
        https://api.slack.com/methods/files.revokePublicURL - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/files.revokePublicURL'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FilesRevokePublicURLResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.files_revoke_public_url_schema = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.files_revoke_public_url_error_schema = out

        return res

    
    def files_shared_public_url(self, request: operations.FilesSharedPublicURLRequest, security: operations.FilesSharedPublicURLSecurity) -> operations.FilesSharedPublicURLResponse:
        r"""Enables a file for public/external sharing.
        https://api.slack.com/methods/files.sharedPublicURL - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/files.sharedPublicURL'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FilesSharedPublicURLResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.files_shared_public_url_schema = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.files_shared_public_url_error_schema = out

        return res

    
    def files_upload(self, request: operations.FilesUploadRequestBody, security: operations.FilesUploadSecurity) -> operations.FilesUploadResponse:
        r"""Uploads or creates a file.
        https://api.slack.com/methods/files.upload - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/files.upload'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FilesUploadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.files_upload_schema = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.files_upload_error_schema = out

        return res

    