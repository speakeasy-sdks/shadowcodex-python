"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from slackspec.models import operations
from typing import Any, Optional

class Dnd:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    
    def dnd_end_dnd(self, request: operations.DndEndDndRequest, security: operations.DndEndDndSecurity) -> operations.DndEndDndResponse:
        r"""Ends the current user's Do Not Disturb session immediately.
        https://api.slack.com/methods/dnd.endDnd - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/dnd.endDnd'
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DndEndDndResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.dnd_end_dnd_schema = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.dnd_end_dnd_error_schema = out

        return res

    
    def dnd_end_snooze(self, request: operations.DndEndSnoozeRequest, security: operations.DndEndSnoozeSecurity) -> operations.DndEndSnoozeResponse:
        r"""Ends the current user's snooze mode immediately.
        https://api.slack.com/methods/dnd.endSnooze - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/dnd.endSnooze'
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DndEndSnoozeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.dnd_end_snooze_schema = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.dnd_end_snooze_error_schema = out

        return res

    
    def dnd_info(self, request: operations.DndInfoRequest, security: operations.DndInfoSecurity) -> operations.DndInfoResponse:
        r"""Retrieves a user's current Do Not Disturb status.
        https://api.slack.com/methods/dnd.info - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/dnd.info'
        
        query_params = utils.get_query_params(operations.DndInfoRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DndInfoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.dnd_info_schema = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.dnd_info_error_schema = out

        return res

    
    def dnd_set_snooze(self, request: operations.DndSetSnoozeRequestBody, security: operations.DndSetSnoozeSecurity) -> operations.DndSetSnoozeResponse:
        r"""Turns on Do Not Disturb mode for the current user, or changes its duration.
        https://api.slack.com/methods/dnd.setSnooze - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/dnd.setSnooze'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DndSetSnoozeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.dnd_set_snooze_schema = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.dnd_set_snooze_error_schema = out

        return res

    
    def dnd_team_info(self, request: operations.DndTeamInfoRequest, security: operations.DndTeamInfoSecurity) -> operations.DndTeamInfoResponse:
        r"""Retrieves the Do Not Disturb status for up to 50 users on a team.
        https://api.slack.com/methods/dnd.teamInfo - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/dnd.teamInfo'
        
        query_params = utils.get_query_params(operations.DndTeamInfoRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DndTeamInfoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_success_template = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_error_template = out

        return res

    