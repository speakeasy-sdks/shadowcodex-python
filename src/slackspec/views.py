"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from slackspec.models import operations
from typing import Any, Optional

class Views:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    
    def views_open(self, request: operations.ViewsOpenRequest, security: operations.ViewsOpenSecurity) -> operations.ViewsOpenResponse:
        r"""Open a view for a user.
        https://api.slack.com/methods/views.open - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/views.open'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.ViewsOpenRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ViewsOpenResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_success_template = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_error_template = out

        return res

    
    def views_publish(self, request: operations.ViewsPublishRequest, security: operations.ViewsPublishSecurity) -> operations.ViewsPublishResponse:
        r"""Publish a static view for a User.
        https://api.slack.com/methods/views.publish - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/views.publish'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.ViewsPublishRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ViewsPublishResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_success_template = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_error_template = out

        return res

    
    def views_push(self, request: operations.ViewsPushRequest, security: operations.ViewsPushSecurity) -> operations.ViewsPushResponse:
        r"""Push a view onto the stack of a root view.
        https://api.slack.com/methods/views.push - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/views.push'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.ViewsPushRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ViewsPushResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_success_template = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_error_template = out

        return res

    
    def views_update(self, request: operations.ViewsUpdateRequest, security: operations.ViewsUpdateSecurity) -> operations.ViewsUpdateResponse:
        r"""Update an existing view.
        https://api.slack.com/methods/views.update - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/views.update'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.ViewsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ViewsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_success_template = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_error_template = out

        return res

    