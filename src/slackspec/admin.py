"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from slackspec.models import operations
from typing import Any, Optional

class Admin:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    
    def admin_apps_approve(self, request: operations.AdminAppsApproveRequest, security: operations.AdminAppsApproveSecurity) -> operations.AdminAppsApproveResponse:
        r"""Approve an app for installation on a workspace.
        https://api.slack.com/methods/admin.apps.approve - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.apps.approve'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminAppsApproveResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_success_template = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_error_template = out

        return res

    
    def admin_apps_approved_list(self, request: operations.AdminAppsApprovedListRequest, security: operations.AdminAppsApprovedListSecurity) -> operations.AdminAppsApprovedListResponse:
        r"""List approved apps for an org or workspace.
        https://api.slack.com/methods/admin.apps.approved.list - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.apps.approved.list'
        
        query_params = utils.get_query_params(operations.AdminAppsApprovedListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminAppsApprovedListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_success_template = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_error_template = out

        return res

    
    def admin_apps_requests_list(self, request: operations.AdminAppsRequestsListRequest, security: operations.AdminAppsRequestsListSecurity) -> operations.AdminAppsRequestsListResponse:
        r"""List app requests for a team/workspace.
        https://api.slack.com/methods/admin.apps.requests.list - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.apps.requests.list'
        
        query_params = utils.get_query_params(operations.AdminAppsRequestsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminAppsRequestsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_success_template = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_error_template = out

        return res

    
    def admin_apps_restrict(self, request: operations.AdminAppsRestrictRequest, security: operations.AdminAppsRestrictSecurity) -> operations.AdminAppsRestrictResponse:
        r"""Restrict an app for installation on a workspace.
        https://api.slack.com/methods/admin.apps.restrict - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.apps.restrict'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminAppsRestrictResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_success_template = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_error_template = out

        return res

    
    def admin_apps_restricted_list(self, request: operations.AdminAppsRestrictedListRequest, security: operations.AdminAppsRestrictedListSecurity) -> operations.AdminAppsRestrictedListResponse:
        r"""List restricted apps for an org or workspace.
        https://api.slack.com/methods/admin.apps.restricted.list - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.apps.restricted.list'
        
        query_params = utils.get_query_params(operations.AdminAppsRestrictedListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminAppsRestrictedListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_success_template = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_error_template = out

        return res

    
    def admin_conversations_archive(self, request: operations.AdminConversationsArchiveRequest, security: operations.AdminConversationsArchiveSecurity) -> operations.AdminConversationsArchiveResponse:
        r"""Archive a public or private channel.
        https://api.slack.com/methods/admin.conversations.archive - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.conversations.archive'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminConversationsArchiveResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.admin_conversations_archive_schema = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.admin_conversations_archive_error_schema = out

        return res

    
    def admin_conversations_convert_to_private(self, request: operations.AdminConversationsConvertToPrivateRequest, security: operations.AdminConversationsConvertToPrivateSecurity) -> operations.AdminConversationsConvertToPrivateResponse:
        r"""Convert a public channel to a private channel.
        https://api.slack.com/methods/admin.conversations.convertToPrivate - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.conversations.convertToPrivate'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminConversationsConvertToPrivateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.admin_conversations_convert_to_private_schema = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.admin_conversations_convert_to_private_error_schema = out

        return res

    
    def admin_conversations_create(self, request: operations.AdminConversationsCreateRequest, security: operations.AdminConversationsCreateSecurity) -> operations.AdminConversationsCreateResponse:
        r"""Create a public or private channel-based conversation.
        https://api.slack.com/methods/admin.conversations.create - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.conversations.create'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminConversationsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.admin_conversations_create_schema = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.admin_conversations_create_error_schema = out

        return res

    
    def admin_conversations_delete(self, request: operations.AdminConversationsDeleteRequest, security: operations.AdminConversationsDeleteSecurity) -> operations.AdminConversationsDeleteResponse:
        r"""Delete a public or private channel.
        https://api.slack.com/methods/admin.conversations.delete - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.conversations.delete'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminConversationsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.admin_conversations_delete_schema = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.admin_conversations_delete_error_schema = out

        return res

    
    def admin_conversations_disconnect_shared(self, request: operations.AdminConversationsDisconnectSharedRequest, security: operations.AdminConversationsDisconnectSharedSecurity) -> operations.AdminConversationsDisconnectSharedResponse:
        r"""Disconnect a connected channel from one or more workspaces.
        https://api.slack.com/methods/admin.conversations.disconnectShared - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.conversations.disconnectShared'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminConversationsDisconnectSharedResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.admin_conversations_rename_schema = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.admin_conversations_disconnect_shared_error_schema = out

        return res

    
    def admin_conversations_ekm_list_original_connected_channel_info(self, request: operations.AdminConversationsEkmListOriginalConnectedChannelInfoRequest, security: operations.AdminConversationsEkmListOriginalConnectedChannelInfoSecurity) -> operations.AdminConversationsEkmListOriginalConnectedChannelInfoResponse:
        r"""List all disconnected channels—i.e., channels that were once connected to other workspaces and then disconnected—and the corresponding original channel IDs for key revocation with EKM.
        https://api.slack.com/methods/admin.conversations.ekm.listOriginalConnectedChannelInfo - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.conversations.ekm.listOriginalConnectedChannelInfo'
        
        query_params = utils.get_query_params(operations.AdminConversationsEkmListOriginalConnectedChannelInfoRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminConversationsEkmListOriginalConnectedChannelInfoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_success_template = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_error_template = out

        return res

    
    def admin_conversations_get_conversation_prefs(self, request: operations.AdminConversationsGetConversationPrefsRequest, security: operations.AdminConversationsGetConversationPrefsSecurity) -> operations.AdminConversationsGetConversationPrefsResponse:
        r"""Get conversation preferences for a public or private channel.
        https://api.slack.com/methods/admin.conversations.getConversationPrefs - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.conversations.getConversationPrefs'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.AdminConversationsGetConversationPrefsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminConversationsGetConversationPrefsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.admin_conversations_get_conversation_prefs_schema = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.admin_conversations_unarchive_error_schema = out

        return res

    
    def admin_conversations_get_teams(self, request: operations.AdminConversationsGetTeamsRequest, security: operations.AdminConversationsGetTeamsSecurity) -> operations.AdminConversationsGetTeamsResponse:
        r"""Get all the workspaces a given public or private channel is connected to within this Enterprise org.
        https://api.slack.com/methods/admin.conversations.getTeams - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.conversations.getTeams'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.AdminConversationsGetTeamsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminConversationsGetTeamsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.admin_conversations_get_teams_schema = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.admin_conversations_get_teams_error_schema = out

        return res

    
    def admin_conversations_invite(self, request: operations.AdminConversationsInviteRequest, security: operations.AdminConversationsInviteSecurity) -> operations.AdminConversationsInviteResponse:
        r"""Invite a user to a public or private channel.
        https://api.slack.com/methods/admin.conversations.invite - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.conversations.invite'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminConversationsInviteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.admin_conversations_invite_schema = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.admin_conversations_invite_error_schema = out

        return res

    
    def admin_conversations_rename(self, request: operations.AdminConversationsRenameRequest, security: operations.AdminConversationsRenameSecurity) -> operations.AdminConversationsRenameResponse:
        r"""Rename a public or private channel.
        https://api.slack.com/methods/admin.conversations.rename - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.conversations.rename'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminConversationsRenameResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.admin_conversations_rename_schema = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.admin_conversations_unarchive_error_schema = out

        return res

    
    def admin_conversations_restrict_access_add_group(self, request: operations.AdminConversationsRestrictAccessAddGroupRequestBody, security: operations.AdminConversationsRestrictAccessAddGroupSecurity) -> operations.AdminConversationsRestrictAccessAddGroupResponse:
        r"""Add an allowlist of IDP groups for accessing a channel
        https://api.slack.com/methods/admin.conversations.restrictAccess.addGroup - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.conversations.restrictAccess.addGroup'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminConversationsRestrictAccessAddGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_success_template = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_error_template = out

        return res

    
    def admin_conversations_restrict_access_list_groups(self, request: operations.AdminConversationsRestrictAccessListGroupsRequest, security: operations.AdminConversationsRestrictAccessListGroupsSecurity) -> operations.AdminConversationsRestrictAccessListGroupsResponse:
        r"""List all IDP Groups linked to a channel
        https://api.slack.com/methods/admin.conversations.restrictAccess.listGroups - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.conversations.restrictAccess.listGroups'
        
        query_params = utils.get_query_params(operations.AdminConversationsRestrictAccessListGroupsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminConversationsRestrictAccessListGroupsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_success_template = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_error_template = out

        return res

    
    def admin_conversations_restrict_access_remove_group(self, request: operations.AdminConversationsRestrictAccessRemoveGroupRequestBody, security: operations.AdminConversationsRestrictAccessRemoveGroupSecurity) -> operations.AdminConversationsRestrictAccessRemoveGroupResponse:
        r"""Remove a linked IDP group linked from a private channel
        https://api.slack.com/methods/admin.conversations.restrictAccess.removeGroup - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.conversations.restrictAccess.removeGroup'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminConversationsRestrictAccessRemoveGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_success_template = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_error_template = out

        return res

    
    def admin_conversations_search(self, request: operations.AdminConversationsSearchRequest, security: operations.AdminConversationsSearchSecurity) -> operations.AdminConversationsSearchResponse:
        r"""Search for public or private channels in an Enterprise organization.
        https://api.slack.com/methods/admin.conversations.search - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.conversations.search'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.AdminConversationsSearchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminConversationsSearchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.admin_conversations_search_schema = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.admin_conversations_search_error_schema = out

        return res

    
    def admin_conversations_set_conversation_prefs(self, request: operations.AdminConversationsSetConversationPrefsRequest, security: operations.AdminConversationsSetConversationPrefsSecurity) -> operations.AdminConversationsSetConversationPrefsResponse:
        r"""Set the posting permissions for a public or private channel.
        https://api.slack.com/methods/admin.conversations.setConversationPrefs - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.conversations.setConversationPrefs'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminConversationsSetConversationPrefsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.admin_conversations_set_conversation_prefs_schema = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.admin_conversations_set_conversation_prefs_error_schema = out

        return res

    
    def admin_conversations_set_teams(self, request: operations.AdminConversationsSetTeamsRequest, security: operations.AdminConversationsSetTeamsSecurity) -> operations.AdminConversationsSetTeamsResponse:
        r"""Set the workspaces in an Enterprise grid org that connect to a public or private channel.
        https://api.slack.com/methods/admin.conversations.setTeams - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.conversations.setTeams'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminConversationsSetTeamsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_success_template = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_error_template = out

        return res

    
    def admin_conversations_unarchive(self, request: operations.AdminConversationsUnarchiveRequest, security: operations.AdminConversationsUnarchiveSecurity) -> operations.AdminConversationsUnarchiveResponse:
        r"""Unarchive a public or private channel.
        https://api.slack.com/methods/admin.conversations.unarchive - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.conversations.unarchive'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminConversationsUnarchiveResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.admin_conversations_unarchive_schema = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.admin_conversations_unarchive_error_schema = out

        return res

    
    def admin_emoji_add(self, request: operations.AdminEmojiAddRequestBody, security: operations.AdminEmojiAddSecurity) -> operations.AdminEmojiAddResponse:
        r"""Add an emoji.
        https://api.slack.com/methods/admin.emoji.add - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.emoji.add'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminEmojiAddResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_success_template = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_error_template = out

        return res

    
    def admin_emoji_add_alias(self, request: operations.AdminEmojiAddAliasRequestBody, security: operations.AdminEmojiAddAliasSecurity) -> operations.AdminEmojiAddAliasResponse:
        r"""Add an emoji alias.
        https://api.slack.com/methods/admin.emoji.addAlias - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.emoji.addAlias'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminEmojiAddAliasResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_success_template = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_error_template = out

        return res

    
    def admin_emoji_list(self, request: operations.AdminEmojiListRequest, security: operations.AdminEmojiListSecurity) -> operations.AdminEmojiListResponse:
        r"""List emoji for an Enterprise Grid organization.
        https://api.slack.com/methods/admin.emoji.list - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.emoji.list'
        
        query_params = utils.get_query_params(operations.AdminEmojiListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminEmojiListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_success_template = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_error_template = out

        return res

    
    def admin_emoji_remove(self, request: operations.AdminEmojiRemoveRequestBody, security: operations.AdminEmojiRemoveSecurity) -> operations.AdminEmojiRemoveResponse:
        r"""Remove an emoji across an Enterprise Grid organization
        https://api.slack.com/methods/admin.emoji.remove - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.emoji.remove'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminEmojiRemoveResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_success_template = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_error_template = out

        return res

    
    def admin_emoji_rename(self, request: operations.AdminEmojiRenameRequestBody, security: operations.AdminEmojiRenameSecurity) -> operations.AdminEmojiRenameResponse:
        r"""Rename an emoji.
        https://api.slack.com/methods/admin.emoji.rename - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.emoji.rename'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminEmojiRenameResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_success_template = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_error_template = out

        return res

    
    def admin_invite_requests_approve(self, request: operations.AdminInviteRequestsApproveRequest, security: operations.AdminInviteRequestsApproveSecurity) -> operations.AdminInviteRequestsApproveResponse:
        r"""Approve a workspace invite request.
        https://api.slack.com/methods/admin.inviteRequests.approve - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.inviteRequests.approve'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminInviteRequestsApproveResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_success_template = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_error_template = out

        return res

    
    def admin_invite_requests_approved_list(self, request: operations.AdminInviteRequestsApprovedListRequest, security: operations.AdminInviteRequestsApprovedListSecurity) -> operations.AdminInviteRequestsApprovedListResponse:
        r"""List all approved workspace invite requests.
        https://api.slack.com/methods/admin.inviteRequests.approved.list - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.inviteRequests.approved.list'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.AdminInviteRequestsApprovedListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminInviteRequestsApprovedListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_success_template = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_error_template = out

        return res

    
    def admin_invite_requests_denied_list(self, request: operations.AdminInviteRequestsDeniedListRequest, security: operations.AdminInviteRequestsDeniedListSecurity) -> operations.AdminInviteRequestsDeniedListResponse:
        r"""List all denied workspace invite requests.
        https://api.slack.com/methods/admin.inviteRequests.denied.list - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.inviteRequests.denied.list'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.AdminInviteRequestsDeniedListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminInviteRequestsDeniedListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_success_template = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_error_template = out

        return res

    
    def admin_invite_requests_deny(self, request: operations.AdminInviteRequestsDenyRequest, security: operations.AdminInviteRequestsDenySecurity) -> operations.AdminInviteRequestsDenyResponse:
        r"""Deny a workspace invite request.
        https://api.slack.com/methods/admin.inviteRequests.deny - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.inviteRequests.deny'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminInviteRequestsDenyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_success_template = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_error_template = out

        return res

    
    def admin_invite_requests_list(self, request: operations.AdminInviteRequestsListRequest, security: operations.AdminInviteRequestsListSecurity) -> operations.AdminInviteRequestsListResponse:
        r"""List all pending workspace invite requests.
        https://api.slack.com/methods/admin.inviteRequests.list - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.inviteRequests.list'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.AdminInviteRequestsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminInviteRequestsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_success_template = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_error_template = out

        return res

    
    def admin_teams_admins_list(self, request: operations.AdminTeamsAdminsListRequest, security: operations.AdminTeamsAdminsListSecurity) -> operations.AdminTeamsAdminsListResponse:
        r"""List all of the admins on a given workspace.
        https://api.slack.com/methods/admin.teams.admins.list - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.teams.admins.list'
        
        query_params = utils.get_query_params(operations.AdminTeamsAdminsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminTeamsAdminsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_success_template = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_error_template = out

        return res

    
    def admin_teams_create(self, request: operations.AdminTeamsCreateRequest, security: operations.AdminTeamsCreateSecurity) -> operations.AdminTeamsCreateResponse:
        r"""Create an Enterprise team.
        https://api.slack.com/methods/admin.teams.create - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.teams.create'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminTeamsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_success_template = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_error_template = out

        return res

    
    def admin_teams_list(self, request: operations.AdminTeamsListRequest, security: operations.AdminTeamsListSecurity) -> operations.AdminTeamsListResponse:
        r"""List all teams on an Enterprise organization
        https://api.slack.com/methods/admin.teams.list - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.teams.list'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.AdminTeamsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminTeamsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_success_template = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_error_template = out

        return res

    
    def admin_teams_owners_list(self, request: operations.AdminTeamsOwnersListRequest, security: operations.AdminTeamsOwnersListSecurity) -> operations.AdminTeamsOwnersListResponse:
        r"""List all of the owners on a given workspace.
        https://api.slack.com/methods/admin.teams.owners.list - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.teams.owners.list'
        
        query_params = utils.get_query_params(operations.AdminTeamsOwnersListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminTeamsOwnersListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_success_template = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_error_template = out

        return res

    
    def admin_teams_settings_info(self, request: operations.AdminTeamsSettingsInfoRequest, security: operations.AdminTeamsSettingsInfoSecurity) -> operations.AdminTeamsSettingsInfoResponse:
        r"""Fetch information about settings in a workspace
        https://api.slack.com/methods/admin.teams.settings.info - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.teams.settings.info'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.AdminTeamsSettingsInfoRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminTeamsSettingsInfoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_success_template = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_error_template = out

        return res

    
    def admin_teams_settings_set_default_channels(self, request: operations.AdminTeamsSettingsSetDefaultChannelsRequestBody, security: operations.AdminTeamsSettingsSetDefaultChannelsSecurity) -> operations.AdminTeamsSettingsSetDefaultChannelsResponse:
        r"""Set the default channels of a workspace.
        https://api.slack.com/methods/admin.teams.settings.setDefaultChannels - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.teams.settings.setDefaultChannels'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminTeamsSettingsSetDefaultChannelsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_success_template = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_error_template = out

        return res

    
    def admin_teams_settings_set_description(self, request: operations.AdminTeamsSettingsSetDescriptionRequest, security: operations.AdminTeamsSettingsSetDescriptionSecurity) -> operations.AdminTeamsSettingsSetDescriptionResponse:
        r"""Set the description of a given workspace.
        https://api.slack.com/methods/admin.teams.settings.setDescription - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.teams.settings.setDescription'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminTeamsSettingsSetDescriptionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_success_template = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_error_template = out

        return res

    
    def admin_teams_settings_set_discoverability(self, request: operations.AdminTeamsSettingsSetDiscoverabilityRequest, security: operations.AdminTeamsSettingsSetDiscoverabilitySecurity) -> operations.AdminTeamsSettingsSetDiscoverabilityResponse:
        r"""An API method that allows admins to set the discoverability of a given workspace
        https://api.slack.com/methods/admin.teams.settings.setDiscoverability - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.teams.settings.setDiscoverability'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminTeamsSettingsSetDiscoverabilityResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_success_template = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_error_template = out

        return res

    
    def admin_teams_settings_set_icon(self, request: operations.AdminTeamsSettingsSetIconRequestBody, security: operations.AdminTeamsSettingsSetIconSecurity) -> operations.AdminTeamsSettingsSetIconResponse:
        r"""Sets the icon of a workspace.
        https://api.slack.com/methods/admin.teams.settings.setIcon - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.teams.settings.setIcon'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminTeamsSettingsSetIconResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_success_template = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_error_template = out

        return res

    
    def admin_teams_settings_set_name(self, request: operations.AdminTeamsSettingsSetNameRequest, security: operations.AdminTeamsSettingsSetNameSecurity) -> operations.AdminTeamsSettingsSetNameResponse:
        r"""Set the name of a given workspace.
        https://api.slack.com/methods/admin.teams.settings.setName - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.teams.settings.setName'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminTeamsSettingsSetNameResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_success_template = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_error_template = out

        return res

    
    def admin_usergroups_add_channels(self, request: operations.AdminUsergroupsAddChannelsRequest, security: operations.AdminUsergroupsAddChannelsSecurity) -> operations.AdminUsergroupsAddChannelsResponse:
        r"""Add one or more default channels to an IDP group.
        https://api.slack.com/methods/admin.usergroups.addChannels - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.usergroups.addChannels'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminUsergroupsAddChannelsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_success_template = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_error_template = out

        return res

    
    def admin_usergroups_add_teams(self, request: operations.AdminUsergroupsAddTeamsRequest, security: operations.AdminUsergroupsAddTeamsSecurity) -> operations.AdminUsergroupsAddTeamsResponse:
        r"""Associate one or more default workspaces with an organization-wide IDP group.
        https://api.slack.com/methods/admin.usergroups.addTeams - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.usergroups.addTeams'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminUsergroupsAddTeamsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_success_template = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_error_template = out

        return res

    
    def admin_usergroups_list_channels(self, request: operations.AdminUsergroupsListChannelsRequest, security: operations.AdminUsergroupsListChannelsSecurity) -> operations.AdminUsergroupsListChannelsResponse:
        r"""List the channels linked to an org-level IDP group (user group).
        https://api.slack.com/methods/admin.usergroups.listChannels - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.usergroups.listChannels'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.AdminUsergroupsListChannelsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminUsergroupsListChannelsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_success_template = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_error_template = out

        return res

    
    def admin_usergroups_remove_channels(self, request: operations.AdminUsergroupsRemoveChannelsRequest, security: operations.AdminUsergroupsRemoveChannelsSecurity) -> operations.AdminUsergroupsRemoveChannelsResponse:
        r"""Remove one or more default channels from an org-level IDP group (user group).
        https://api.slack.com/methods/admin.usergroups.removeChannels - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.usergroups.removeChannels'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminUsergroupsRemoveChannelsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_success_template = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_error_template = out

        return res

    
    def admin_users_assign(self, request: operations.AdminUsersAssignRequest, security: operations.AdminUsersAssignSecurity) -> operations.AdminUsersAssignResponse:
        r"""Add an Enterprise user to a workspace.
        https://api.slack.com/methods/admin.users.assign - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.users.assign'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminUsersAssignResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_success_template = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_error_template = out

        return res

    
    def admin_users_invite(self, request: operations.AdminUsersInviteRequest, security: operations.AdminUsersInviteSecurity) -> operations.AdminUsersInviteResponse:
        r"""Invite a user to a workspace.
        https://api.slack.com/methods/admin.users.invite - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.users.invite'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminUsersInviteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_success_template = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_error_template = out

        return res

    
    def admin_users_list(self, request: operations.AdminUsersListRequest, security: operations.AdminUsersListSecurity) -> operations.AdminUsersListResponse:
        r"""List users on a workspace
        https://api.slack.com/methods/admin.users.list - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.users.list'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.AdminUsersListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminUsersListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_success_template = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_error_template = out

        return res

    
    def admin_users_remove(self, request: operations.AdminUsersRemoveRequest, security: operations.AdminUsersRemoveSecurity) -> operations.AdminUsersRemoveResponse:
        r"""Remove a user from a workspace.
        https://api.slack.com/methods/admin.users.remove - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.users.remove'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminUsersRemoveResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_success_template = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_error_template = out

        return res

    
    def admin_users_session_invalidate(self, request: operations.AdminUsersSessionInvalidateRequest, security: operations.AdminUsersSessionInvalidateSecurity) -> operations.AdminUsersSessionInvalidateResponse:
        r"""Invalidate a single session for a user by session_id
        https://api.slack.com/methods/admin.users.session.invalidate - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.users.session.invalidate'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminUsersSessionInvalidateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_success_template = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_error_template = out

        return res

    
    def admin_users_session_reset(self, request: operations.AdminUsersSessionResetRequest, security: operations.AdminUsersSessionResetSecurity) -> operations.AdminUsersSessionResetResponse:
        r"""Wipes all valid sessions on all devices for a given user
        https://api.slack.com/methods/admin.users.session.reset - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.users.session.reset'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminUsersSessionResetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_success_template = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_error_template = out

        return res

    
    def admin_users_set_admin(self, request: operations.AdminUsersSetAdminRequest, security: operations.AdminUsersSetAdminSecurity) -> operations.AdminUsersSetAdminResponse:
        r"""Set an existing guest, regular user, or owner to be an admin user.
        https://api.slack.com/methods/admin.users.setAdmin - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.users.setAdmin'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminUsersSetAdminResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_success_template = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_error_template = out

        return res

    
    def admin_users_set_expiration(self, request: operations.AdminUsersSetExpirationRequest, security: operations.AdminUsersSetExpirationSecurity) -> operations.AdminUsersSetExpirationResponse:
        r"""Set an expiration for a guest user
        https://api.slack.com/methods/admin.users.setExpiration - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.users.setExpiration'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminUsersSetExpirationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_success_template = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_error_template = out

        return res

    
    def admin_users_set_owner(self, request: operations.AdminUsersSetOwnerRequest, security: operations.AdminUsersSetOwnerSecurity) -> operations.AdminUsersSetOwnerResponse:
        r"""Set an existing guest, regular user, or admin user to be a workspace owner.
        https://api.slack.com/methods/admin.users.setOwner - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.users.setOwner'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminUsersSetOwnerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_success_template = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_error_template = out

        return res

    
    def admin_users_set_regular(self, request: operations.AdminUsersSetRegularRequest, security: operations.AdminUsersSetRegularSecurity) -> operations.AdminUsersSetRegularResponse:
        r"""Set an existing guest user, admin user, or owner to be a regular user.
        https://api.slack.com/methods/admin.users.setRegular - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin.users.setRegular'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminUsersSetRegularResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_success_template = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.default_error_template = out

        return res

    