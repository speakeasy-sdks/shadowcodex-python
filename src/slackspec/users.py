"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from slackspec.models import operations
from typing import Any, Optional

class Users:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    
    def users_conversations(self, request: operations.UsersConversationsRequest, security: operations.UsersConversationsSecurity) -> operations.UsersConversationsResponse:
        r"""List conversations the calling user may access.
        https://api.slack.com/methods/users.conversations - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/users.conversations'
        
        query_params = utils.get_query_params(operations.UsersConversationsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UsersConversationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.users_conversations_success_schema = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.users_conversations_error_schema = out

        return res

    
    def users_delete_photo(self, request: operations.UsersDeletePhotoRequestBody, security: operations.UsersDeletePhotoSecurity) -> operations.UsersDeletePhotoResponse:
        r"""Delete the user profile photo
        https://api.slack.com/methods/users.deletePhoto - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/users.deletePhoto'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UsersDeletePhotoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.users_delete_photo_schema = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.users_delete_photo_error_schema = out

        return res

    
    def users_get_presence(self, request: operations.UsersGetPresenceRequest, security: operations.UsersGetPresenceSecurity) -> operations.UsersGetPresenceResponse:
        r"""Gets user presence information.
        https://api.slack.com/methods/users.getPresence - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/users.getPresence'
        
        query_params = utils.get_query_params(operations.UsersGetPresenceRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UsersGetPresenceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.api_method_users_get_presence = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.users_counts_error_schema = out

        return res

    
    def users_identity(self, request: operations.UsersIdentityRequest, security: operations.UsersIdentitySecurity) -> operations.UsersIdentityResponse:
        r"""Get a user's identity.
        https://api.slack.com/methods/users.identity - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/users.identity'
        
        query_params = utils.get_query_params(operations.UsersIdentityRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UsersIdentityResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.users_identity_schema = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.users_identity_error_schema = out

        return res

    
    def users_info(self, request: operations.UsersInfoRequest, security: operations.UsersInfoSecurity) -> operations.UsersInfoResponse:
        r"""Gets information about a user.
        https://api.slack.com/methods/users.info - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/users.info'
        
        query_params = utils.get_query_params(operations.UsersInfoRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UsersInfoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.users_info_success_schema = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.users_info_error_schema = out

        return res

    
    def users_list(self, request: operations.UsersListRequest, security: operations.UsersListSecurity) -> operations.UsersListResponse:
        r"""Lists all users in a Slack team.
        https://api.slack.com/methods/users.list - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/users.list'
        
        query_params = utils.get_query_params(operations.UsersListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UsersListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.users_list_schema = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.users_list_error_schema = out

        return res

    
    def users_lookup_by_email(self, request: operations.UsersLookupByEmailRequest, security: operations.UsersLookupByEmailSecurity) -> operations.UsersLookupByEmailResponse:
        r"""Find a user with an email address.
        https://api.slack.com/methods/users.lookupByEmail - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/users.lookupByEmail'
        
        query_params = utils.get_query_params(operations.UsersLookupByEmailRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UsersLookupByEmailResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.users_lookup_by_email_success_schema = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.users_lookup_by_email_error_schema = out

        return res

    
    def users_profile_get(self, request: operations.UsersProfileGetRequest, security: operations.UsersProfileGetSecurity) -> operations.UsersProfileGetResponse:
        r"""Retrieves a user's profile information.
        https://api.slack.com/methods/users.profile.get - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/users.profile.get'
        
        query_params = utils.get_query_params(operations.UsersProfileGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UsersProfileGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.users_profile_get_schema = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.users_profile_get_error_schema = out

        return res

    
    def users_profile_set(self, request: operations.UsersProfileSetRequest, security: operations.UsersProfileSetSecurity) -> operations.UsersProfileSetResponse:
        r"""Set the profile information for a user.
        https://api.slack.com/methods/users.profile.set - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/users.profile.set'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UsersProfileSetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.users_profile_set_schema = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.users_profile_set_error_schema = out

        return res

    
    def users_set_active(self, request: operations.UsersSetActiveRequest, security: operations.UsersSetActiveSecurity) -> operations.UsersSetActiveResponse:
        r"""Marked a user as active. Deprecated and non-functional.
        https://api.slack.com/methods/users.setActive - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/users.setActive'
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UsersSetActiveResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.users_set_active_schema = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.users_set_active_error_schema = out

        return res

    
    def users_set_photo(self, request: operations.UsersSetPhotoRequestBody, security: operations.UsersSetPhotoSecurity) -> operations.UsersSetPhotoResponse:
        r"""Set the user profile photo
        https://api.slack.com/methods/users.setPhoto - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/users.setPhoto'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UsersSetPhotoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.users_set_photo_schema = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.users_set_photo_error_schema = out

        return res

    
    def users_set_presence(self, request: operations.UsersSetPresenceRequest, security: operations.UsersSetPresenceSecurity) -> operations.UsersSetPresenceResponse:
        r"""Manually sets user presence.
        https://api.slack.com/methods/users.setPresence - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/users.setPresence'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UsersSetPresenceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.users_set_presence_schema = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.users_set_presence_error_schema = out

        return res

    